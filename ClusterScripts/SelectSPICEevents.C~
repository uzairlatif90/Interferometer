const Int_t MCH=16;

#include "FFTtools.h"
#include "../Interferometer/Interferometer.cc"
#include <gsl/gsl_math.h>
#include <gsl/gsl_spline.h>

//Double_t TrueX=-456.721; 
Double_t TrueX=-456.721;
Double_t TrueY=-2353;
gsl_interp_accel *spline_acc;
gsl_spline *spline_steffen;

TGraph *gCPtemp[2][16];

void ReadCPTemp(){  

  {
    TString filename="";
    filename+="../CP_D6VPol_A2.root";
    TFile *f = TFile::Open(filename, "READ");
    for(int ich=0;ich<MCH;ich++){
      TString GetGraph="gr";
      GetGraph+=ich;
      f->GetObject(GetGraph, gCPtemp[0][ich]);
    }
    delete f;
  }
  {
    TString filename="";
    filename+="../CP_D6HPol_A2.root";
    TFile *f = TFile::Open(filename, "READ");
    for(int ich=0;ich<MCH;ich++){
      TString GetGraph="gr";
      GetGraph+=ich;
      f->GetObject(GetGraph, gCPtemp[1][ich]);
    }
    delete f;
  }
  
}

double FindApproximateMinimum(double *v, double *p){

  double x, y, z;
  x = v[0];
  y = v[1];
  z = v[2];
  
  double AntennaCoordTx[3]={x,y,z};

  double timeRay[2][TotalAntennasRx];
  int IgnoreCh[2][TotalAntennasRx];
  double ChDRTime[TotalAntennasRx];

  for(int iRx=0;iRx<TotalAntennasRx;iRx++){
    for(int iray=0;iray<2;iray++){
      IgnoreCh[iray][iRx]=1;
    }
    ChDRTime[iRx]=0;
  }

  Double_t SumSNRD=0, SumSNRR=0,SumSNR=0;
  for(int iRx=0;iRx<TotalAntennasRx;iRx++){
    if(p[2*TotalAntennasRx +iRx]!=0){
      SumSNRD+=p[4*TotalAntennasRx +iRx];
    }
    if(p[3*TotalAntennasRx +iRx]!=0){
      SumSNRR+=p[5*TotalAntennasRx +iRx];
    }
  }
  SumSNR=SumSNRR+SumSNRD;
  
  Interferometer::GenerateChHitTimeAndCheckHits(AntennaCoordTx,timeRay,IgnoreCh);
  bool CheckStationTrigger=Interferometer::CheckTrigger(IgnoreCh);

  if(CheckStationTrigger==true){
    Interferometer::FindFirstHitAndNormalizeHitTime(timeRay,IgnoreCh,ChDRTime);
    
    double chi2=0;
    for(int iRx=0;iRx<TotalAntennasRx;iRx++){
      if(p[2*TotalAntennasRx +iRx]!=0){
      	chi2+=pow((p[4*TotalAntennasRx +iRx]*(timeRay[0][iRx] - p[0+iRx]))/SumSNR,2);
      }
      if(p[3*TotalAntennasRx +iRx]!=0){
      	chi2+=pow((p[5*TotalAntennasRx +iRx]*(timeRay[1][iRx] - p[1*TotalAntennasRx+iRx]))/SumSNR,2);
      }
      // if(p[2*TotalAntennasRx +iRx]!=0 && p[3*TotalAntennasRx +iRx]!=0){
      //   chi2+=pow(ChDRTime[iRx]- (p[1*TotalAntennasRx+iRx] - p[0+iRx]) ,2);
      // }
    }
    return chi2;
  }else{ 
    return GSL_NAN;
  }

}

void LoadDepthFile(){
  
  Int_t StartTime=1545822000-13*60*60;
  ////Open the file
  std::ifstream ain("Depth26Dec.txt");
  int n1=0;////variable for counting total number of data points
  std::string line;
  int dummy[2]={0,0};////temporary variable for storing data values from the file  

  vector<double> Time[3];
  vector<double> Depth;
  //Check if file is open and store data
  if(ain.is_open()){
    while (true){
      ain>>dummy[0]>>dummy[1];
      if( ain.eof()) break;
      Double_t hrs=(dummy[0]-dummy[0]%100)/100 -11;
      Double_t min=dummy[0]%100;
      Time[0].push_back(hrs);
      Time[1].push_back(min);
      Time[2].push_back(StartTime+min*60+hrs*60*60);
      Depth.push_back(dummy[1]);
      //cout<<setprecision(10)<<n1<<" "<<hrs<<" "<<min<<" "<<StartTime+min*60+hrs*60*60<<" "<<dummy[1]<<endl;
      n1++;
    }
  }
  ain.close();

  spline_acc = gsl_interp_accel_alloc();
  spline_steffen = gsl_spline_alloc(gsl_interp_steffen, Time[0].size());
  gsl_spline_init(spline_steffen, Time[2].data(), Depth.data(), Time[0].size());

}

void FindInitialValues(double GuessTxCor[3][3], double ChHitTime[2][TotalAntennasRx], int IgnoreCh[2][TotalAntennasRx],double ChSNR[2][TotalAntennasRx]){
  
  double ChDRTime[TotalAntennasRx];

  Double_t NumBinsX=10,NumBinsY=10,NumBinsZ=10;
  Double_t StartX=TrueX-500,StartY=TrueY-500,StartZ=400;
  Double_t StopX=TrueX+500,StopY=TrueY+500,StopZ=2000;
  Double_t StepSizeX=(StopX-StartX)/NumBinsX,StepSizeY=(StopY-StartY)/NumBinsY,StepSizeZ=(StopZ-StartZ)/NumBinsZ;
 
  vector <double> RecoPar[4];
  double ParameterArray[6*TotalAntennasRx];
   
  //Interferometer::AddGaussianJitterToHitTimes(10,ChHitTime);
  Interferometer::FindFirstHitAndNormalizeHitTime(ChHitTime,IgnoreCh,ChDRTime);

  int iEnt=0;
  for(int iray=0;iray<2;iray++){
    for(int iRx=0;iRx<TotalAntennasRx;iRx++){
      ParameterArray[iEnt]=ChHitTime[iray][iRx];
      iEnt++;
    } 
  }
  for(int iray=0;iray<2;iray++){
    for(int iRx=0;iRx<TotalAntennasRx;iRx++){
      ParameterArray[iEnt]=IgnoreCh[iray][iRx];
      iEnt++;
    } 
  }
  for(int iray=0;iray<2;iray++){
    for(int iRx=0;iRx<TotalAntennasRx;iRx++){
      ParameterArray[iEnt]=ChSNR[iray][iRx];
      iEnt++;
    } 
  }
  
  for(double i=0; i<=NumBinsX;i++){
    double Xt=i*StepSizeX+ StartX;
    for(double j=0; j<=NumBinsY;j++){	
      double Yt=j*StepSizeY + StartY;
      for(double k=0; k<=NumBinsZ;k++){
	double Zt=k*StepSizeZ + StartZ;
	
	double TestTx[3]={Xt,Yt,Zt};
	double min=FindApproximateMinimum(TestTx, ParameterArray);
	if(isnan(min)==false){
	  RecoPar[0].push_back(Xt);
	  RecoPar[1].push_back(Yt);
	  RecoPar[2].push_back(-Zt);
	  RecoPar[3].push_back(min);
	}
		
      }
    }
  }

  int Nmin=0;
  while(Nmin<3){
    int FinalMinValueBin=TMath::LocMin(RecoPar[3].size(),RecoPar[3].data());
    double FinalMinValue=RecoPar[3][FinalMinValueBin];
	
    GuessTxCor[Nmin][0]=RecoPar[0][FinalMinValueBin];
    GuessTxCor[Nmin][1]=RecoPar[1][FinalMinValueBin];
    GuessTxCor[Nmin][2]=-RecoPar[2][FinalMinValueBin];
    RecoPar[3][FinalMinValueBin]=10000000000;
    
    //cout<<FinalMinValueBin<<" "<<FinalMinValue<<" "<<TxCor[Nmin][0]<<" "<<TxCor[Nmin][1]<<" "<<TxCor[Nmin][2]<<endl;
    Nmin++;
  }
  
  //cout<<FinalMinValueBin<<" "<<FinalMinValue<<" "<<FinalTxCor[0]<<" "<<FinalTxCor[1]<<" "<<FinalTxCor[2]<<endl;
}

void RunInterferometer(double ChHitTime[2][TotalAntennasRx], double FinalTxCor[3], int IgnoreCh[2][TotalAntennasRx],double ChSNR[2][TotalAntennasRx], double EventUnixTime, double &Duration){ 
  auto t1b = std::chrono::high_resolution_clock::now();
  
  double SPICE_Depth = gsl_spline_eval(spline_steffen, EventUnixTime, spline_acc);

  //TVector3 v1(TrueX,TrueY,-SPICE_Depth);
  double theta,phi,r;
  // theta=v1.Theta()*(180/pi);
  // phi=v1.Phi()*(180/pi);
  // r=v1.Mag();

  theta=((atan2(sqrt(TrueX*TrueX+TrueY*TrueY),(-SPICE_Depth))))*(180/pi);
  phi=atan2(TrueY,TrueX)*(180/pi);
  r=sqrt(TrueX*TrueX + TrueY*TrueY + SPICE_Depth*SPICE_Depth);
  
  //cout<<" initial conditions: "<<theta<<" "<<phi<<" "<<r<<endl;
  const int InitialValueNum=1;
  double XYZInitialValues[InitialValueNum][3]={{theta,phi,r}};
  
  //cout<<EventUnixTime<<" "<<SPICE_Depth<<endl;
  // const int InitialValueNum=4;
  //  double XYZInitialValues[InitialValueNum][3]={{0,0,0},{0,0,0},{0,0,0},{-500,-2000,1000}};
  // FindInitialValues(XYZInitialValues, ChHitTime, IgnoreCh,ChSNR);
  
  vector <double> RecoXYZValues[3];
  vector <double> RecofMinValues;
  double FinalMinValue=0;
  int FinalMinValueBin=0;
  double JitterNumber=5; 
  double ChDRTime[TotalAntennasRx];
  //Interferometer::AddGaussianJitterToHitTimes(JitterNumber,ChHitTime);
  Interferometer::FindFirstHitAndNormalizeHitTime(ChHitTime,IgnoreCh,ChDRTime);

  Double_t TrueValues[3]={TrueX,TrueY,-SPICE_Depth};
  
  int iInVal=0;
  while(iInVal<InitialValueNum){
    double DummyRecoCor[3];
    double DummyMin;
    Interferometer::Minimizer(XYZInitialValues[iInVal],TrueValues,DummyRecoCor,ChHitTime,IgnoreCh,ChSNR,DummyMin);
    //cout<<"Attempt No. "<<iInVal<<" :: Reco Results are: Xreco="<<RecoXYZValues[iInVal][0]<<" ,Yreco="<<RecoXYZValues[iInVal][1]<<" ,Zreco="<<RecoXYZValues[iInVal][2]<<" "<<RecofMinValues[iInVal]<<endl;
    //if(DummyRecoCor[2]>-2000 && DummyRecoCor[2]<0){
    RecoXYZValues[0].push_back(DummyRecoCor[0]);
    RecoXYZValues[1].push_back(DummyRecoCor[1]);
    RecoXYZValues[2].push_back(DummyRecoCor[2]);
    RecofMinValues.push_back(DummyMin);
    //}
    iInVal++;
  }
  
  if(RecofMinValues.size()!=0){
    FinalMinValueBin=TMath::LocMin(RecofMinValues.size(),RecofMinValues.data());
    FinalMinValue=RecofMinValues[FinalMinValueBin];
    FinalTxCor[0]=RecoXYZValues[0][FinalMinValueBin];
    FinalTxCor[1]=RecoXYZValues[1][FinalMinValueBin];
    FinalTxCor[2]=RecoXYZValues[2][FinalMinValueBin];
  }else{
    FinalTxCor[0]=0;
    FinalTxCor[1]=0;
    FinalTxCor[2]=0;
  }
  auto t2b = std::chrono::high_resolution_clock::now();
  auto durationb = std::chrono::duration_cast<std::chrono::microseconds>( t2b - t1b ).count();

  Duration=durationb/1000;
}

Double_t GetNoiseRMS(TGraph *gr){

  Int_t nDiv=10;
  Int_t nPoints = gr->GetN();
  Double_t *yVals = gr->GetY();
  Int_t PPD=floor((Double_t)nPoints/nDiv);/// divide the rest of the WF into 10 parts
    
  Double_t mean=0.;
  Double_t meanSq=0.;
  ///find the part with the lowest RMS
  Double_t newRMS=10000000;
  Double_t rms=0;
  Int_t noidiv=0;
  for(Int_t nd=0;nd<nDiv;nd++){
    mean=0.;
    meanSq=0.;
    for(Int_t i=nd*PPD;i<PPD+(nd*PPD);i++){
      mean+=yVals[i];
      meanSq+=yVals[i]*yVals[i];
    }
    mean=mean/PPD;
    meanSq=meanSq/PPD;
    rms=sqrt(meanSq-mean*mean);
    if(rms<newRMS){
      newRMS=rms;
      noidiv=nd;
    }
  }
  
  return newRMS;
}

void PeakFinder(TGraph *grPwrEnvOriginal, TGraph *grPeakPoint){

  TGraph *grPwrEnvSmooth=FFTtools::getBoxCar(grPwrEnvOriginal,7); 
 	
  vector <Double_t> Peaks[3];
  vector <Double_t> Troughs[3];
	
  Int_t TotalgrSamples=grPwrEnvSmooth->GetN();
  Int_t DeltaSamples=8;
  Double_t yi=0;
  for(Int_t isample=0; isample<TotalgrSamples; isample++){
    Double_t xp,yp;
    grPwrEnvSmooth->GetPoint(isample,xp,yp);

    Double_t RightSideCount=0;
    for(Int_t isampleDelta=isample; isampleDelta<=DeltaSamples+isample; isampleDelta++){
      if(isampleDelta<TotalgrSamples){
	grPwrEnvSmooth->GetPoint(isampleDelta,xp,yp);
	if(isampleDelta==isample){
	  yi=yp;
	}
	if(yp<yi){
	  RightSideCount++;
	}
      }else{
	isampleDelta=DeltaSamples+isample+1;
      }
    }

    Double_t LeftSideCount=0;
    for(Int_t isampleDelta=isample; isampleDelta>=isample-DeltaSamples; isampleDelta--){
      if(isampleDelta>=0){
	grPwrEnvSmooth->GetPoint(isampleDelta,xp,yp);
	if(isampleDelta==isample){
	  yi=yp;
	}
	if(yp<yi){
	  LeftSideCount++;
	}
      }else{
	isampleDelta=isample-DeltaSamples-1;
      }
    }

    grPwrEnvSmooth->GetPoint(isample,xp,yp);
    if(LeftSideCount==DeltaSamples && RightSideCount==DeltaSamples){
      //cout<<"we have a peak "<<xp<<" "<<yp<<endl;
      Peaks[0].push_back(xp);
      Peaks[1].push_back(yp);
      Peaks[2].push_back(isample);
    }

    if(LeftSideCount+RightSideCount<=DeltaSamples*2 && isample<=DeltaSamples*2+1 && RightSideCount>0 && LeftSideCount>0){
      //cout<<"we have a peak "<<xp<<" "<<yp<<endl;
      Peaks[0].push_back(xp);
      Peaks[1].push_back(yp);
      Peaks[2].push_back(isample);
    }
    if(RightSideCount==DeltaSamples  && isample<=DeltaSamples && LeftSideCount==0){
      //cout<<"we have a peak "<<xp<<" "<<yp<<endl;
      Peaks[0].push_back(xp);
      Peaks[1].push_back(yp);
      Peaks[2].push_back(isample);
    }

    if(LeftSideCount+RightSideCount<=DeltaSamples*2 && isample>=TotalgrSamples-(DeltaSamples*2+1) && RightSideCount>0 && LeftSideCount>0){
      //cout<<"we have a peak "<<xp<<" "<<yp<<endl;
      Peaks[0].push_back(xp);
      Peaks[1].push_back(yp);
      Peaks[2].push_back(isample);
    }
    if(LeftSideCount==DeltaSamples  && isample>=TotalgrSamples-DeltaSamples && RightSideCount==0){
      //cout<<"we have a peak "<<xp<<" "<<yp<<endl;
      Peaks[0].push_back(xp);
      Peaks[1].push_back(yp);
      Peaks[2].push_back(isample);
    }
	  
  }

  //Int_t DummyBin=TMath::LocMax(TotalgrSamples,grPwrEnvSmooth->GetY());
  // if(DummyBin<DeltaSamples || DummyBin>TotalgrSamples-DeltaSamples){
  //   Double_t xp,yp;
  //   grPwrEnvSmooth->GetPoint(DummyBin,xp,yp);
  //   Peaks[0].push_back(xp);
  //   Peaks[1].push_back(yp);
  //   Peaks[2].push_back(DummyBin);
  // }
  
  Double_t PowerPeakAmp[4]={0,0,0,0};
  Double_t PowerPeakTime[4]={0,0,0,0};
  Double_t PowerPeakBin[4]={0,0,0,0};
	
  Int_t DummyBin=TMath::LocMax(Peaks[1].size(),Peaks[1].data());
  PowerPeakAmp[0]=Peaks[1][DummyBin];
  PowerPeakTime[0]=Peaks[0][DummyBin];
  PowerPeakBin[0]=Peaks[2][DummyBin];
  Peaks[1][DummyBin]=0;
	
  DummyBin=TMath::LocMax(Peaks[1].size(),Peaks[1].data());
  PowerPeakAmp[1]=Peaks[1][DummyBin];
  PowerPeakTime[1]=Peaks[0][DummyBin];
  PowerPeakBin[1]=Peaks[2][DummyBin];

  for(Int_t ipeak=0;ipeak<2;ipeak++){
    vector <Double_t> RefinePeak[3];
    for(Int_t isample=PowerPeakBin[ipeak]-DeltaSamples; isample<=PowerPeakBin[ipeak]+DeltaSamples; isample++){
      Double_t xp,yp;
      grPwrEnvOriginal->GetPoint(isample,xp,yp);
      RefinePeak[0].push_back(xp);
      RefinePeak[1].push_back(yp);
      RefinePeak[2].push_back(isample);
    }
      
    DummyBin=TMath::LocMax(RefinePeak[1].size(),RefinePeak[1].data());
    PowerPeakAmp[ipeak]=RefinePeak[1][DummyBin];
    PowerPeakTime[ipeak]=RefinePeak[0][DummyBin];
    PowerPeakBin[ipeak]=RefinePeak[2][DummyBin];
    RefinePeak[0].clear();
    RefinePeak[1].clear();
    RefinePeak[2].clear();
  }  

  Double_t NoiseRMS=GetNoiseRMS(grPwrEnvOriginal);
  Int_t IgnorePeak[2]={1,1};
  Double_t LargePeak=PowerPeakAmp[1];
  Double_t SmallPeak=PowerPeakAmp[0];
  if(SmallPeak>LargePeak){
    swap(SmallPeak,LargePeak);
  }

  if(SmallPeak>=LargePeak*0.25 && fabs(PowerPeakTime[1]-PowerPeakTime[0])>40 ){
    //cout<<"We have two peaks "<<endl;

    if(PowerPeakTime[0]>PowerPeakTime[1]){
      swap(PowerPeakTime[0],PowerPeakTime[1]);
      swap(PowerPeakAmp[0],PowerPeakAmp[1]);
      swap(PowerPeakBin[0],PowerPeakBin[1]);
    }

    for(Int_t ipeak=0;ipeak<2;ipeak++){
      vector <Double_t> RefinePeak[3];
   
      for(Int_t isample=PowerPeakBin[ipeak]-20; isample<=PowerPeakBin[ipeak]+20; isample++){
	if(isample>-1){
	  Double_t xp,yp;
	  grPwrEnvOriginal->GetPoint(isample,xp,yp);
	  if(isample<PowerPeakBin[ipeak]-5 || isample>PowerPeakBin[ipeak]+5){
	    RefinePeak[0].push_back(xp);
	    RefinePeak[1].push_back(yp);
	    RefinePeak[2].push_back(isample);
	  }
	}
      }
      
      DummyBin=TMath::LocMax(RefinePeak[1].size(),RefinePeak[1].data());
      PowerPeakAmp[ipeak+2]=RefinePeak[1][DummyBin];
      PowerPeakTime[ipeak+2]=RefinePeak[0][DummyBin];
      PowerPeakBin[ipeak+2]=RefinePeak[2][DummyBin];
      RefinePeak[0].clear();
      RefinePeak[1].clear();
      RefinePeak[2].clear();   
    
      Double_t LargePeak=PowerPeakAmp[ipeak+2];
      Double_t SmallPeak=PowerPeakAmp[ipeak];
      if(SmallPeak>LargePeak){
	swap(SmallPeak,LargePeak);
      }
      if(fabs(PowerPeakTime[ipeak+2]-PowerPeakTime[ipeak])>25*0.6 && SmallPeak>=LargePeak*0.10){
	PowerPeakAmp[ipeak]=(PowerPeakAmp[ipeak]+PowerPeakAmp[ipeak+2])/2;
	PowerPeakTime[ipeak]=(PowerPeakTime[ipeak]*PowerPeakAmp[ipeak]+PowerPeakTime[ipeak+2]*PowerPeakAmp[ipeak+2])/(PowerPeakAmp[ipeak]+PowerPeakAmp[ipeak+2]);
      }
    }
    
    if(PowerPeakBin[1]<2*DeltaSamples){
      IgnorePeak[1]=0;
    }
    if(PowerPeakBin[0]<2*DeltaSamples){
      IgnorePeak[0]=0;
    }
    
    // Int_t StartBin=PowerPeakBin[0];
    // Int_t EndBin=PowerPeakBin[1];
    // if(StartBin>EndBin){
    //   StartBin=PowerPeakBin[1];
    //   EndBin=PowerPeakBin[0];
    // }
    // for(Int_t isample=StartBin; isample<EndBin; isample++){
    //   Double_t xp,yp;
    //   grPwrEnvOriginal->GetPoint(isample,xp,yp);
    //   Troughs[0].push_back(xp);
    //   Troughs[1].push_back(yp);
    //   Troughs[2].push_back(isample);
    // }
	  
    // DummyBin=TMath::LocMin(Troughs[1].size(),Troughs[1].data());
    // Double_t TroughAmp=Troughs[1][DummyBin];
    // Double_t TroughTime=Troughs[0][DummyBin];
    // Double_t TroughBin=Troughs[2][DummyBin];

    //cout<<PowerPeakTime[0]<<" "<<PowerPeakAmp[0]<<" "<<PowerPeakTime[1]<<" "<<PowerPeakAmp[1]<<" "<<TroughTime<<" "<<TroughAmp<<endl;
  
    grPeakPoint->SetPoint(0,PowerPeakTime[0],PowerPeakAmp[0]);
    //grPeakPoint->SetPoint(1,TroughTime,TroughAmp);
    grPeakPoint->SetPoint(1,PowerPeakTime[1],PowerPeakAmp[1]);
    grPeakPoint->SetPoint(2,PowerPeakTime[0],PowerPeakAmp[0]/NoiseRMS);
    grPeakPoint->SetPoint(3,PowerPeakTime[1],PowerPeakAmp[1]/NoiseRMS);
    grPeakPoint->SetPoint(4,IgnorePeak[0],0);
    grPeakPoint->SetPoint(5,IgnorePeak[1],0);
  }else{
    //cout<<"We have one peak "<<endl;

    for(Int_t ipeak=0;ipeak<1;ipeak++){
      vector <Double_t> RefinePeak[3];
   
      for(Int_t isample=PowerPeakBin[ipeak]-20; isample<=PowerPeakBin[ipeak]+20; isample++){
	if(isample>-1){
	  Double_t xp,yp;
	  grPwrEnvOriginal->GetPoint(isample,xp,yp);
	  if(isample<PowerPeakBin[ipeak]-5 || isample>PowerPeakBin[ipeak]+5){
	    RefinePeak[0].push_back(xp);
	    RefinePeak[1].push_back(yp);
	    RefinePeak[2].push_back(isample);
	  }
	}
      }
      
      DummyBin=TMath::LocMax(RefinePeak[1].size(),RefinePeak[1].data());
      PowerPeakAmp[ipeak+2]=RefinePeak[1][DummyBin];
      PowerPeakTime[ipeak+2]=RefinePeak[0][DummyBin];
      PowerPeakBin[ipeak+2]=RefinePeak[2][DummyBin];
      RefinePeak[0].clear();
      RefinePeak[1].clear();
      RefinePeak[2].clear(); 
    
      Double_t LargePeak=PowerPeakAmp[ipeak+2];
      Double_t SmallPeak=PowerPeakAmp[ipeak];
      if(SmallPeak>LargePeak){
	swap(SmallPeak,LargePeak);
      }
      if(fabs(PowerPeakTime[ipeak+2]-PowerPeakTime[ipeak])>25*0.6 && SmallPeak>=LargePeak*0.10){
	PowerPeakAmp[ipeak]=(PowerPeakAmp[ipeak]+PowerPeakAmp[ipeak+2])/2;
	PowerPeakTime[ipeak]=(PowerPeakTime[ipeak]*PowerPeakAmp[ipeak]+PowerPeakTime[ipeak+2]*PowerPeakAmp[ipeak+2])/(PowerPeakAmp[ipeak]+PowerPeakAmp[ipeak+2]);
      }
    }
    
    if(PowerPeakBin[0]<2*DeltaSamples){
      IgnorePeak[0]=0;
    }
    
    //cout<<PowerPeakTime[0]<<" "<<PowerPeakAmp[0]<<" "<<PowerPeakTime[1]<<" "<<PowerPeakAmp[1]<<endl;
    grPeakPoint->SetPoint(0,PowerPeakTime[0],PowerPeakAmp[0]);
    grPeakPoint->SetPoint(1,PowerPeakTime[0],PowerPeakAmp[0]/NoiseRMS);
    grPeakPoint->SetPoint(2,IgnorePeak[0],0);
  }
      
  Peaks[0].clear();
  Peaks[1].clear();
  Peaks[2].clear();

  Troughs[0].clear();
  Troughs[1].clear();
  Troughs[2].clear();
  
}

void TrackSPICE_B2(){

  ReadCPTemp();
  Int_t StationId=2;
  DeclareAntennaConfigARA(StationId);
  LoadDepthFile();

  ////initialise the event pointer to take data from the event tree
  RawAtriStationEvent *rawAtriEvPtr=0;

  ////initialise the AraEventCalibrator class  
  AraEventCalibrator *calib = AraEventCalibrator::Instance();
  
  ///Open the ARA root file that contains the data
  TFile *newfile=new TFile("../run_012576/event012576.root");
  TFile *ResultFile=new TFile("Reco12576_results.root","RECREATE");
   
  ///Open the Tree in the file that contains data from all of the events
  TTree *ceventTree = (TTree*)newfile->Get("eventTree");

  Int_t runNumber;
  ///Set the Branch addresses
  ceventTree->SetBranchAddress("event",&rawAtriEvPtr);
  ceventTree->SetBranchAddress("run",&runNumber);
  cout<<"Opened the file and set the Branches"<<endl; 
  
  ///Get the total number of entries within the tree
  Int_t nument=ceventTree->GetEntries();

  vector <Double_t> UnixTime[MCH];
  vector <Double_t> V2n[MCH];
  vector <Double_t> PwrSNR[2][MCH];
  
  vector <Double_t> CorScore[MCH];
  vector <Double_t> CorTime[MCH];
  vector <Double_t> dtDR_Ch[MCH];
  vector <Double_t> DRAmpRatio_Ch[MCH];
  vector <Double_t> SPICEReco[3];
  vector <Double_t> UnixTimeSelected;
  vector <Double_t> UnixTimeReco;
  vector <Double_t> DurationReco;

  vector <Double_t> V2nAvg;
  vector <Double_t> CorScoreAvg;

  TH2D * h2=new TH2D("","",200,0,60000,200,0,12000);
  TH1D * hReco[3];
  // hReco[0]=new TH1D("","",200,TrueX-500,TrueX+500);
  // hReco[1]=new TH1D("","",200,TrueY-500,TrueY+500);

  hReco[0]=new TH1D("","",200,-20,20);
  hReco[1]=new TH1D("","",200,-20,20);  
  hReco[2]=new TH1D("","",200,-500,500);
  for(Int_t ixyz=0; ixyz<3; ixyz++){
    hReco[ixyz]->SetMarkerStyle(20);
    hReco[ixyz]->SetMarkerColor(2+ixyz);
  }
  TGraph *grCor[MCH];
  TGraph *gr[MCH];
  TGraph *grPwrEnv[MCH];
  // TGraph *grPeakPoint[MCH];

  const Int_t NumCutCh=4;
  Double_t CutCh[NumCutCh]={8,15,11,13};
  Double_t FirstUnixTime=0;
  Int_t ient=0;
  
  ///Start looping over the events
  for(Int_t ievt=5; ievt<nument; ievt++){
  //for(Int_t ievt=30000; ievt<30000+100; ievt++){
  
    ceventTree->GetEntry(ievt);
    cout<<ient<<" "<<ievt<<" "<<rawAtriEvPtr->eventNumber<<endl;
    /////Right now only look at RF events which are not calpulser and software triggers
    if(rawAtriEvPtr->isCalpulserEvent()==false && rawAtriEvPtr->timeStamp>1000 && rawAtriEvPtr->isSoftwareTrigger()==false){
      ///Initialise the Useful event pointer to load the ARA event waveforms with the right calibration
      UsefulAtriStationEvent *realAtriEvPtr=new UsefulAtriStationEvent(rawAtriEvPtr, AraCalType::kLatestCalib);
      
      Double_t EventNum=rawAtriEvPtr->eventNumber;
      Double_t UTime=rawAtriEvPtr->unixTime;
      Double_t UTimeUs=rawAtriEvPtr->unixTimeUs;
      Double_t TStamp=rawAtriEvPtr->timeStamp;
      if(ient==0){
	FirstUnixTime=UTime;
	cout<<"UTime "<<setprecision(10)<<UTime<<endl;
      }
      // vector <Double_t> yar[MCH];   
      // vector <Double_t> xar[MCH];   

      Double_t V2nSum=0;
      Double_t CorScoreSum=0;
      
      ///For each event loop over the 16 channels
      for(Int_t ich=0; ich<MCH; ich++){
	Bool_t SkipCh=false;
	for(Int_t icut=0; icut<NumCutCh; icut++){
	  if(ich==CutCh[icut]){
	    SkipCh=true;
	  }
	}
	if(SkipCh==false){
	  ///Get the Waveform from the data file for each channel
	  TGraph *grdum=realAtriEvPtr->getGraphFromRFChan(ich);

	  ///Interpolate the waveforms to ensure equal spacing between the samples
	  TGraph *gr=FFTtools::getInterpolatedGraph(grdum,0.6);
	  delete grdum;
	
	  ///Get the SNR of the waveform of each channel
	  //cout<<"SNR of channel "<<ich<<" is "<<FFTtools::getWaveformSNR(gr[ich])<<endl;
	
	  ///Get the total no. of points in the waveform
	  Int_t grpnts=gr->GetN();	

	  Double_t V2=0;
	  for(Int_t i=0; i<grpnts; i++){
	    Double_t x,y;
	    gr->GetPoint(i,x,y);
	    // xar[ich].push_back(x);
	    // yar[ich].push_back(y*y);
	    V2+=y*y;
	  }
	  V2nSum+=V2/(double)grpnts;
	  UnixTime[ich].push_back(UTime-FirstUnixTime);
	  V2n[ich].push_back(V2/(double)grpnts);
	  
	  if(ich<8){
	    grCor[ich]=FFTtools::getCorrelationGraph(gCPtemp[0][ich],gr);
	  }else{
	    grCor[ich]=FFTtools::getCorrelationGraph(gCPtemp[1][ich],gr);
	  }
	  Int_t nBins = grCor[ich]->GetN();
	  Double_t *yVals = grCor[ich]->GetY();
	  Double_t *xVals = grCor[ich]->GetX();
	  
	  Double_t MaxCorScore=TMath::MaxElement(nBins,yVals);
	  Int_t CorTimeBin=TMath::LocMax(nBins,yVals);
	  Double_t CorTimeVal=xVals[CorTimeBin];

	  CorScoreSum+=MaxCorScore;
	  CorScore[ich].push_back(MaxCorScore);
	  CorTime[ich].push_back(CorTimeVal);
	  
	  //cout<<ich<<" "<<CorScore[ich+MCH*itmp]<<" "<<CorTime[ich+MCH*itmp]<<endl;
	  
	  delete []xVals;
	  delete []yVals;
	
	  delete gr;
	}
      }////channel loop
      
      V2nAvg.push_back(V2nSum/(MCH-NumCutCh));
      CorScoreAvg.push_back(CorScoreSum/(MCH-NumCutCh));
      h2->Fill(V2nSum/(MCH-NumCutCh),CorScoreSum/(MCH-NumCutCh));
    }
  }
}
